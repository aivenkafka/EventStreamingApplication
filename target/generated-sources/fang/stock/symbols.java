/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package fang.stock;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class symbols extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4986832994949433995L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"symbols\",\"namespace\":\"fang.stock\",\"fields\":[{\"name\":\"Symbol\",\"type\":\"string\",\"doc\":\"Stock Ticker Symbol\"},{\"name\":\"AskingPrice\",\"type\":\"int\",\"doc\":\"Asking Price of the Stock in USD\"},{\"name\":\"TimeOfBid\",\"type\":\"string\",\"doc\":\"Time of bid in ISO format\"}],\"version\":\"1\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<symbols> ENCODER =
      new BinaryMessageEncoder<symbols>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<symbols> DECODER =
      new BinaryMessageDecoder<symbols>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<symbols> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<symbols> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<symbols> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<symbols>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this symbols to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a symbols from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a symbols instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static symbols fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Stock Ticker Symbol */
  @Deprecated public java.lang.CharSequence Symbol;
  /** Asking Price of the Stock in USD */
  @Deprecated public int AskingPrice;
  /** Time of bid in ISO format */
  @Deprecated public java.lang.CharSequence TimeOfBid;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public symbols() {}

  /**
   * All-args constructor.
   * @param Symbol Stock Ticker Symbol
   * @param AskingPrice Asking Price of the Stock in USD
   * @param TimeOfBid Time of bid in ISO format
   */
  public symbols(java.lang.CharSequence Symbol, java.lang.Integer AskingPrice, java.lang.CharSequence TimeOfBid) {
    this.Symbol = Symbol;
    this.AskingPrice = AskingPrice;
    this.TimeOfBid = TimeOfBid;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return Symbol;
    case 1: return AskingPrice;
    case 2: return TimeOfBid;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: Symbol = (java.lang.CharSequence)value$; break;
    case 1: AskingPrice = (java.lang.Integer)value$; break;
    case 2: TimeOfBid = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'Symbol' field.
   * @return Stock Ticker Symbol
   */
  public java.lang.CharSequence getSymbol() {
    return Symbol;
  }


  /**
   * Sets the value of the 'Symbol' field.
   * Stock Ticker Symbol
   * @param value the value to set.
   */
  public void setSymbol(java.lang.CharSequence value) {
    this.Symbol = value;
  }

  /**
   * Gets the value of the 'AskingPrice' field.
   * @return Asking Price of the Stock in USD
   */
  public int getAskingPrice() {
    return AskingPrice;
  }


  /**
   * Sets the value of the 'AskingPrice' field.
   * Asking Price of the Stock in USD
   * @param value the value to set.
   */
  public void setAskingPrice(int value) {
    this.AskingPrice = value;
  }

  /**
   * Gets the value of the 'TimeOfBid' field.
   * @return Time of bid in ISO format
   */
  public java.lang.CharSequence getTimeOfBid() {
    return TimeOfBid;
  }


  /**
   * Sets the value of the 'TimeOfBid' field.
   * Time of bid in ISO format
   * @param value the value to set.
   */
  public void setTimeOfBid(java.lang.CharSequence value) {
    this.TimeOfBid = value;
  }

  /**
   * Creates a new symbols RecordBuilder.
   * @return A new symbols RecordBuilder
   */
  public static fang.stock.symbols.Builder newBuilder() {
    return new fang.stock.symbols.Builder();
  }

  /**
   * Creates a new symbols RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new symbols RecordBuilder
   */
  public static fang.stock.symbols.Builder newBuilder(fang.stock.symbols.Builder other) {
    if (other == null) {
      return new fang.stock.symbols.Builder();
    } else {
      return new fang.stock.symbols.Builder(other);
    }
  }

  /**
   * Creates a new symbols RecordBuilder by copying an existing symbols instance.
   * @param other The existing instance to copy.
   * @return A new symbols RecordBuilder
   */
  public static fang.stock.symbols.Builder newBuilder(fang.stock.symbols other) {
    if (other == null) {
      return new fang.stock.symbols.Builder();
    } else {
      return new fang.stock.symbols.Builder(other);
    }
  }

  /**
   * RecordBuilder for symbols instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<symbols>
    implements org.apache.avro.data.RecordBuilder<symbols> {

    /** Stock Ticker Symbol */
    private java.lang.CharSequence Symbol;
    /** Asking Price of the Stock in USD */
    private int AskingPrice;
    /** Time of bid in ISO format */
    private java.lang.CharSequence TimeOfBid;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(fang.stock.symbols.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.Symbol)) {
        this.Symbol = data().deepCopy(fields()[0].schema(), other.Symbol);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.AskingPrice)) {
        this.AskingPrice = data().deepCopy(fields()[1].schema(), other.AskingPrice);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.TimeOfBid)) {
        this.TimeOfBid = data().deepCopy(fields()[2].schema(), other.TimeOfBid);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing symbols instance
     * @param other The existing instance to copy.
     */
    private Builder(fang.stock.symbols other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.Symbol)) {
        this.Symbol = data().deepCopy(fields()[0].schema(), other.Symbol);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.AskingPrice)) {
        this.AskingPrice = data().deepCopy(fields()[1].schema(), other.AskingPrice);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.TimeOfBid)) {
        this.TimeOfBid = data().deepCopy(fields()[2].schema(), other.TimeOfBid);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'Symbol' field.
      * Stock Ticker Symbol
      * @return The value.
      */
    public java.lang.CharSequence getSymbol() {
      return Symbol;
    }


    /**
      * Sets the value of the 'Symbol' field.
      * Stock Ticker Symbol
      * @param value The value of 'Symbol'.
      * @return This builder.
      */
    public fang.stock.symbols.Builder setSymbol(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.Symbol = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'Symbol' field has been set.
      * Stock Ticker Symbol
      * @return True if the 'Symbol' field has been set, false otherwise.
      */
    public boolean hasSymbol() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'Symbol' field.
      * Stock Ticker Symbol
      * @return This builder.
      */
    public fang.stock.symbols.Builder clearSymbol() {
      Symbol = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'AskingPrice' field.
      * Asking Price of the Stock in USD
      * @return The value.
      */
    public int getAskingPrice() {
      return AskingPrice;
    }


    /**
      * Sets the value of the 'AskingPrice' field.
      * Asking Price of the Stock in USD
      * @param value The value of 'AskingPrice'.
      * @return This builder.
      */
    public fang.stock.symbols.Builder setAskingPrice(int value) {
      validate(fields()[1], value);
      this.AskingPrice = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'AskingPrice' field has been set.
      * Asking Price of the Stock in USD
      * @return True if the 'AskingPrice' field has been set, false otherwise.
      */
    public boolean hasAskingPrice() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'AskingPrice' field.
      * Asking Price of the Stock in USD
      * @return This builder.
      */
    public fang.stock.symbols.Builder clearAskingPrice() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'TimeOfBid' field.
      * Time of bid in ISO format
      * @return The value.
      */
    public java.lang.CharSequence getTimeOfBid() {
      return TimeOfBid;
    }


    /**
      * Sets the value of the 'TimeOfBid' field.
      * Time of bid in ISO format
      * @param value The value of 'TimeOfBid'.
      * @return This builder.
      */
    public fang.stock.symbols.Builder setTimeOfBid(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.TimeOfBid = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'TimeOfBid' field has been set.
      * Time of bid in ISO format
      * @return True if the 'TimeOfBid' field has been set, false otherwise.
      */
    public boolean hasTimeOfBid() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'TimeOfBid' field.
      * Time of bid in ISO format
      * @return This builder.
      */
    public fang.stock.symbols.Builder clearTimeOfBid() {
      TimeOfBid = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public symbols build() {
      try {
        symbols record = new symbols();
        record.Symbol = fieldSetFlags()[0] ? this.Symbol : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.AskingPrice = fieldSetFlags()[1] ? this.AskingPrice : (java.lang.Integer) defaultValue(fields()[1]);
        record.TimeOfBid = fieldSetFlags()[2] ? this.TimeOfBid : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<symbols>
    WRITER$ = (org.apache.avro.io.DatumWriter<symbols>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<symbols>
    READER$ = (org.apache.avro.io.DatumReader<symbols>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.Symbol);

    out.writeInt(this.AskingPrice);

    out.writeString(this.TimeOfBid);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.Symbol = in.readString(this.Symbol instanceof Utf8 ? (Utf8)this.Symbol : null);

      this.AskingPrice = in.readInt();

      this.TimeOfBid = in.readString(this.TimeOfBid instanceof Utf8 ? (Utf8)this.TimeOfBid : null);

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.Symbol = in.readString(this.Symbol instanceof Utf8 ? (Utf8)this.Symbol : null);
          break;

        case 1:
          this.AskingPrice = in.readInt();
          break;

        case 2:
          this.TimeOfBid = in.readString(this.TimeOfBid instanceof Utf8 ? (Utf8)this.TimeOfBid : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










